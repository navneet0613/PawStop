/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.nscompany.pawstop;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class Home_a extends javax.swing.JInternalFrame {
ArrayList<Appointment> list = new ArrayList<Appointment>();
    /**
     * Creates new form Home_a
     */
    public Home_a() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI uii=(BasicInternalFrameUI)this.getUI();
        uii.setNorthPane(null);
        getUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(1150, 734));
        jPanel1.setMinimumSize(new java.awt.Dimension(1150, 734));
        jPanel1.setPreferredSize(new java.awt.Dimension(1150, 734));
        jPanel1.setLayout(null);

        jButton1.setText("Deny");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(540, 520, 75, 22);

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(640, 520, 75, 22);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(80, 170, 995, 399);

        jLabel1.setForeground(new java.awt.Color(52, 139, 227));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jj.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 60, 1100, 610);

        jLabel2.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(52, 139, 227));
        jLabel2.setText("Appointments");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(150, 40, 180, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        
        Appointment taskModel = new Appointment();
        int id = Integer.parseInt(dtm.getValueAt(selectedRow, 0).toString());
        
        for (Appointment listElement: list) {
            if (listElement.getId() == id) {
                taskModel = listElement;
                break;
            }
            
        }
         
    }
         private void getUsers() {
        final String statement = "SELECT * from appointment";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);

            ResultSet resultSet = preparedStatement.executeQuery();
            
            final String[] headerName = {"id","name","gender","species","breed","dob","purposeofvisit","symptom","dateofapp","oname","phoneno","email","address    "};
            DefaultTableModel tableModel = new DefaultTableModel(null, headerName);
            jTable1.setModel(tableModel);
           


            list.clear();

            while (resultSet.next()) {
                    
                Appointment taskModel = new Appointment();
                taskModel.setId(resultSet.getInt("id"));
                taskModel.setName(resultSet.getString("name"));
                taskModel.setGender(resultSet.getString("gender"));
                taskModel.setSpecies(resultSet.getString("species")); 
                taskModel.setBreed(resultSet.getString("breed"));
                taskModel.setDob(resultSet.getString("dob"));
                taskModel.setPurposeofvisit(resultSet.getString("purposeofvisit"));
                taskModel.setSymptom(resultSet.getString("symptom"));
                taskModel.setDateofapp(resultSet.getString("dateofapp"));
                taskModel.setOname(resultSet.getString("oname"));
                taskModel.setPhoneno(resultSet.getString("phoneno"));
                taskModel.setEmail(resultSet.getString("email"));
                taskModel.setAddress(resultSet.getString("address"));
                
                list.add(taskModel);
                Object[] row = new Object[13];
                row[0] = taskModel.getId();
                row[1] = taskModel.getName();
                row[2] = taskModel.getGender();
                row[3] = taskModel.getSpecies();              
                row[4] = taskModel.getBreed();  
                row[5] = taskModel.getDob();  
                row[6] = taskModel.getPurposeofvisit();  
                row[7] = taskModel.getSymptom(); 
                row[8] = taskModel.getDateofapp(); 
                row[9] = taskModel.getOname();  
                row[10] = taskModel.getPhoneno();  
                row[11] = taskModel.getEmail();  
                row[12] = taskModel.getAddress();  
                
                tableModel.addRow(row);
            }
                
            for (Appointment taskModel: list) {
                System.out.println(taskModel.getId());
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Home_a.class.getName()).log(Level.SEVERE, null, ex);
        }        
      
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 int selectedRow = jTable1.getSelectedRow();
 if (selectedRow != -1) {           
            int id = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());           
            deleteAppointment(id);             
            list.removeIf(appointment -> appointment.getId() == id);
            ((DefaultTableModel) jTable1.getModel()).removeRow(selectedRow);

            JOptionPane.showMessageDialog(rootPane, "Appointment denied and deleted!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select a appointment to deny!");
        }
    }

    private void deleteAppointment(int id) {
        
         final String statement = "DELETE FROM appointment WHERE id=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);

            ResultSet resultSet = preparedStatement.executeQuery();
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException ex) {
           
            Logger.getLogger(Home_a.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       int selectedRow = jTable1.getSelectedRow();
  if (selectedRow != -1) {
    int id = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());
    // No database update needed for accepting, just send alert
//    sendAppointmentAcceptedAlert(id);
    JOptionPane.showMessageDialog(rootPane, "Appointment accepted!");
  } else {
    JOptionPane.showMessageDialog(rootPane, "Please select an appointment to accept!");
  }

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
